{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"General Information","text":"<p>\ud83d\ude80 Plug &amp; Play First-Person Controller for Godot Mono 4.4+ Just drag, drop, and you're ready to go FPS-style! This first-person character controller is tailor-made for developers who want solid, smooth, and satisfying movement right out of the box.</p> <p>\ud83d\udca1 Core Features That Feel Great</p> <ul> <li>\ud83c\udfc3\u200d\u2642\ufe0f Movement \u2013 Smooth walking, running, and turning that feels intuitive and responsive</li> <li>\ud83e\uddcd\u200d\u2642\ufe0f Jumping, crouching, and smooth crouch jumps!</li> <li>\ud83d\udd27 Automatic handling of low height bumps and obstacles \u2013 Automatically adjusts your character\u2019s movement to smoothly handle low height bumps and small obstacles</li> <li>\ud83e\ude9c Automatic stair climbing \u2013 walk up and down step-shaped terrain effortlessly</li> <li>\ud83d\udca5 Health, damage, and death \u2013 complete with dramatic shader effects</li> <li>\ud83e\udd38 Head-bump protection \u2013 jump without getting stuck in ceilings</li> <li>\ud83c\udfa2 Bobbing movement \u2013 immersive bounce while walking, crouching, and sprinting to bring your character to life</li> <li>\ud83d\udeab No mesh invasion \u2013 tight collision keeps your player out of walls, floors, and ceilings where they don\u2019t belong</li> <li>\ud83d\udd27 Developer API \u2013 Fully customizable! Access key functions through an easy-to-use API to tweak or extend the controller to fit your project needs  </li> </ul> <p>\ud83d\udc68\u200d\ud83d\udcbb Built by devs, for devs \u2014 clean, extendable, and battle-tested. Just drop it into your scene and go! \ud83d\udee0\ufe0f Perfect for FPS games, exploration projects, or rapid prototyping.  </p>"},{"location":"#requirements","title":"Requirements","text":"<p>Godot .NET 4.4</p>"},{"location":"#other-links","title":"Other links","text":"<ul> <li>Asset libary link for the addon</li> <li>Contribute or post issues on our GitHub Repository </li> <li>Join our discord server when you have questions about the player controller</li> </ul>"},{"location":"#troubleshooting","title":"Troubleshooting","text":""},{"location":"#if-you-see-cannot-instantiate-c-script-because","title":"If you see \"Cannot instantiate C# script because...\"","text":"<p>Godot .NET detects whether you are using C# in your project, and if you are it will reveal the \"Build Project\" (looks like a hammer) button to the left of \"Run Project\". However, when you import our addon into a Godot project that previously had no C# scripts, this button may not appear. Should this happen to you, simply navigate to and click on Project &gt; Tools &gt; C# &gt; Create C# Solution. The \"Build Project\" hammer will now appear. Click it to build C# scripts and the message should go away.</p>"},{"location":"tutorial-1/","title":"Getting Started","text":"<p>After installing the addon from the AssetLib, a PlayerController node can be added into your scene using the Scene pane. PlayerController is implemented as a scene hierarchy, which means it must be instantiated in your game world as a child scene. Click the chain link icon at the top of the Scene pane in Godot.</p> <p></p> <p>This will bring up a window that may be blank or may contain some of your already saved scenes. In the bottom right of the window, make sure to toggle on the Addons switch. You can now find PlayerController.tscn in the list or search for it.</p> <p></p> <p>Select PlayerController.tscn.</p> <p></p> <p>The default capsule mesh of the PlayerController scene will have been added to the scene. It's name in the node hierarchy is simply \"Player\". It may not be placed in the scene in an ideal location, so be sure to adjust it's transform until the capsule shape is not obscured by any other collision geometry. </p> <p></p> <p></p> <p>For PlayerController to work properly, make sure that some collision geometry is present in your world and is on Collision Layer 1 (in the next section you will see how this parameter can be adjusted). </p> <p>You can now try out PlayerController in your game world.</p> <p></p>"},{"location":"tutorial-2/","title":"Edit Parameters and Children","text":"<p>By selecting the Player node in the Scene pane, you can view its 4 movement related parameters in the inspector. </p> <p></p> <p>There are many more parameters that can be accessed to alter the behavior of all the systems contained in PlayerController. In order to do this, right click the Player node in the Scene pane</p> <p></p> <p>Then tick on Editable Children in the menu that appears.</p> <p></p> <p>A list of all of Player's children will appear in yellow to indicate edits to these node parameters will only take effect and be saved in the current scene they are present in, and should you untick Editable Children those edits will be lost.</p> <p></p> <p>Proceed to the next section for a more permanent method modifying the PlayerController scene for your needs. </p>"},{"location":"tutorial-3/","title":"Extend PlayerController for your own Game","text":"<p>This tutorial will walk your through extending PlayerController.tscn for your own needs in such a way that your newly extended version can easily be dragged and dropped into any number of game worlds without additional effort. </p> <p>Begin by navigating to the PlayerController.tscn file in the FileSystem pane. You will find it under addons/player_controller. Right click the file and select \"New Inherited Scene\". </p> <p></p> <p>The editor will now open into a 3D scene that contains only the Player node as the root and all of it's editable children in yellow. </p> <p></p> <p>In this scene you can modify any parameters of Player or its children as needed or even disable features by detaching scripts from Yellow nodes and/or making them invisible as needed. You can also add on your own features by adding Nodes of your own that may run scripts of your own creation at any place in the Player hierarchy you may need.</p>"},{"location":"tutorial-3/#utilizing-playercontroller-signal-api","title":"Utilizing PlayerController Signal API","text":"<p>Lets demonstrate how you can make the PlayerController.tscn scene your own by using the Signal API to add a jump sound effect. </p> <p>Select the Player root node at the top of the Scene pane, then click the big plus-sign to open the Create New Node window.</p> <p></p> <p>Double click the AudioStreamPlayer3D node to add it as a child of Player. </p> <p></p> <p>With the AudioStreamPlayer3D node selected in the Scene pane, drag-and-drop your jump audio file (in our case jump.wav) from the FileSystem pane to the Stream export in the Inspector for the AudioStreamPlayer3D.</p> <p></p> <p>Click the Stream export and then the player button to make sure the jump sounds alright in the engine. </p> <p></p> <p>Now click the tab to the right of \"Inspector\" to bring up the Node pane, and again select the Player node in the Scene pane on the other side of the editor. You will now see a list of all Signals that may be emitted by the Player node, including the two defined in the PlayerController.cs script: HeadHitCeiling and Jumped.</p> <p></p> <p>Right click the Jumped signal and click \"Connect\".</p> <p></p> <p>A window will pop-up to select the method we want to be called when the player node emits the Jumped signal. Scroll down to the AudioStreamPlayer3D that we just added as a child of Player, select it, then click \"Pick\" (there is no need to modify the string to the right of the Pick button).</p> <p></p> <p>The resulting additional pop-up will show all methods in AudioStreamPlayer3D this signal may be connected to. We want to connect it to the play method, so that the sound effect will play each time the player jumps. Double click the play method to select it. </p> <p></p> <p>The popup will close and the text to the left of the \"Pick\" button should say \"play\". Click the \"Connect\" button to finalize the signal-to-method connection.  </p> <p>In the Node pane that signal will now indicate what method of which node it is connected to.</p> <p></p> <p>Save this inherited scene with its own unique name. We have now successfully given our player's jump a sound effect! To try it out add the inherited scene to your game world following the steps in Tutorial 1.0, then play the world scene.  </p> <p>To see more examples of using the Signal API, you can open the PlayerControllerWithSfx.tscn in the editor, which connects the rest of the signal API to different sound effects.</p>"},{"location":"z-api-reference/","title":"API Reference","text":"<p>This page is a comprehensive guide to everything the plugin is capable of. It is organized by each script that makes the PlayerController.tscn scene work. We will start with an explanation of the PlayerController.cs script and its exports.</p> <p>The root PlayerController.cs script provides public access to its child scripts, so that an external script can easily gain access to either PlayerController's members or the members of its children. Any one of the exports mentioned here in this document may be accessed by a script that has a reference to the node by accessing the member of the same name as what shows in the editor inspector, but without spaces. For example, to get or set the Player's walk speed use <code>Player.WalkSpeed</code>, or to get or set the Player's current health use <code>Player.HealthSystem.CurrentHealth</code>. </p>"},{"location":"z-api-reference/#playercontroller","title":"PlayerController","text":"<p>(Player in Scene pane)</p> <p>This is the root script of the scene and therefore manages all of its childs' operations. It inherits from a CharacterBody3D.</p> Parameter Name Description Walk Speed The speed in meters per second the player can walk at. Sprint Speed The speed in meters per second the player can sprint at. Crouch Speed The speed in meters per second the player can move at while crouched. Crouch Transition Speed The speed in meters per second at which the player can transition from standing to crouching and vice verse. <p>The Player node also implements signals developers can trigger their own scripted events off of.</p> Signal Name Description Jumped This emits from the Player node at the start of a player's jump. HeadHit This emits whenever the player's head collides with a surface. <p>Refer to the tutorial on Utilizing PlayerController Signal API for instructions on utilizing Player signals.</p>"},{"location":"z-api-reference/#input","title":"Input","text":"<p>The Player node is meant to be as simple as drag-and-drop, so by default typical WASD keyboard and mouse input is hard-coded into the PlayerController script. However, a user can easily override some or all of these inputs by setting the values in the Input section of the Player inspector to input action names present in the user's project. Controller buttons can even been supported via this method. For more details on how to implement input actions into your project, refer to the Godot documentation on InputMap. The following is a table of actions supported by Player and their corresponding input action override value.</p> Action Default Key Override Parameter String Move Foward W Move Forward Input Action Move Backward S Move Backward Input Action Strafe Left A Strafe Left Input Action Strafe Right D Strafe Right Input Action Jump Space bar Jump Input Action Crouch Ctrl Crouch Input Action Sprint Shift Sprint Input Action <p>Since the look control is handled by a different script, refer to the Mouse section later in this document to learn how to switch mouse look to gamepad right analog look and adjust the sensitivity for both.</p>"},{"location":"z-api-reference/#capsulecollider","title":"CapsuleCollider","text":"<p>This script is responsible for managing the height of the collision capsule. It inherits from a CollisionShape3D</p> Parameter Name Description Capsule Default Height The height of the player's capsule collider nominally. Capsule Crouch Height The height of the player's capsule collider while crouching."},{"location":"z-api-reference/#healthsystem","title":"HealthSystem","text":"<p>This script is responsible for managing the player's health and rendering both the damage and death effects.</p> <p>When running a debug build of the game, the H key can be pressed to damage the player to test out the health system. This can be disabled in the debug build by toggling Press H To Inflict Damage off.</p> Parameter Name Description Press H To Inflict Damage If true, the inflict damage debug button will be enabled. It is recommended to disable this if you intend to use \"H\" key for another purpose. <p>This node also supports signals a developer can trigger their own code off of.</p> Signal Name Description Damaged(float) Emitted whenever the player is damaged, and passes the amount the player was damaged by in the signal. Died Emitted whenever the player is killed. FullyRecovered Emitted whenever the player has fully regenerated their health. <p>Refer to the tutorial on Utilizing PlayerController Signal API for instructions on utilizing Player signals.</p>"},{"location":"z-api-reference/#metrics","title":"Metrics","text":"<p>This inspector section contains all properties relating to health values and their regeneration.</p>"},{"location":"z-api-reference/#amounts","title":"Amounts","text":"Parameter Name Description Max Health Maximum health of the player. Current Health will never go above this value. Current Health The health of the player at the start of a scene. Minimal Damage Unit The minimal amount the player may be damaged by when falling. Also used for the damage debug tool that is activated by pressing \"H\""},{"location":"z-api-reference/#regeneration","title":"Regeneration","text":"<p>These properties control how the player regenerates health over time. If no regeneration is desired for your project, Regeneration Speed can be set to zero to disable it.</p> Parameter Name Description Seconds Before Regeneration The delay before health regeneration kicks in. Regeneration Speed The speed at which health regenerates in units of hit points per second."},{"location":"z-api-reference/#damage-camera-effects","title":"Damage Camera Effects","text":"<p>The health system features a robust system of visual effects from a distortion shader to head shake upon damage taken, all of which can be configured with a large suite of properties.</p>"},{"location":"z-api-reference/#camera-shake","title":"Camera Shake","text":"<p>When the player takes damage the first-person camera will be quickly rotated off center as if recoiling from an attack.</p> Parameter Name Description Rotation Speed The speed at which the camera spins along its z-axis when the Player takes damage. Rotation Degree The maximum angle, in degrees, by which the camera spins along its z-axis when the Player takes damage. To disable the camera shake effect, set this value to zero."},{"location":"z-api-reference/#visual-distortion","title":"Visual Distortion","text":"<p>The visual distortion effect applies de-saturation, Perlin noise distortion, and vignetting to the first-person camera's view that all scale relative to the player's damage level.</p> <p>Each of the following values progress from the minimum (Min) to the maximum (Max) value as the player progresses from barely damaged to near death.</p> Parameter Name Description Screen Darkness Min/Max The level of screen darkening. Distortion Speed Min/Max The speed at which Perlin noise distortion moves past the screen. A higher value results in a more wobbly distortion effect. Distortion Size Min/Max The size of the Perlin noise distortion. The larger the value the more noticeable the distortion is."},{"location":"z-api-reference/#vignetting","title":"Vignetting","text":"<p>When the player is damage, a vignette of red will appear that oscillates inward and outward.</p> Parameter Name Description Active Zone Multiplier Min/Max The normalized radial distance from the center that the vignette gradient oscillates around. Progresses from Min to Max as player becomes more damaged. Multiplier Delta for Animation The amplitude of oscillation of the vignetting effect. Softness The width of the gradient from pure red to fully transparent. Speed Min/Max The oscillation speed of the vignette. Progresses from Min to Max as the player become more damaged."},{"location":"z-api-reference/#death","title":"Death","text":"<p>When the player meets their demise, the camera will be procedurally animated to drop to the floor and the screen will begin to blur and fade to black.</p>"},{"location":"z-api-reference/#speeds","title":"Speeds","text":"Parameter Name Description Camera Drop Speed on Death The speed with which the first-person camera drops to the floor. Fade Out Speed The speed with which the screen fades to black."},{"location":"z-api-reference/#target-values","title":"Target Values","text":"Parameter Name Description Camera Height On Death The height to which the first-person camera drops to upon death. Fade Out Target Value The inverse speed with which the first-person camera fades to black upon death. The lower the value, the longer before it fully fades to black. Blur Limit Target Value How blurred vision gets after death and before fade to black. Blur Target Value The final blur value before fade to black is complete. Screen Darkness To Reload Scene How long the screen remains black for before the scene is reloaded."},{"location":"z-api-reference/#stamina","title":"Stamina","text":"<p>This node controls the player's ability to maintain a sprint. The ability to Sprint can be disabled by setting Max Run Time to zero. To allow the player to sprint indefinitely, toggle Limitless Sprint to true; when true the other 2 parameters in this node will have no effect.</p> Parameter Name Description Limitless Sprint Set this to true to allow the player to sprint indefinitely. Max Run Time The maximum time the player is allowed to sprint for before becoming exhausted. Sprint Time Regeneration Multiplier A multiplier that determines the regeneration speed of the player. Full stamina regeneration will always be equal to the Max Run Time divided by this value. For example, if this value equals 2 and the Max Sprint Time equals 10, then the player will regenerate stamina in 10 / 2 = 5 seconds."},{"location":"z-api-reference/#stairssystem","title":"StairsSystem","text":"<p>Any stair shaped collision object or curb can be procedurally handled by this node, allowing players to ascend and descend whatever heights you deem them capable of stepping over.</p> Parameter Name Description Max Step Height The maximum height of a curb or stair step that the play can stride up onto. Anything higher than this value will be treated as a wall, but could still be jumped over if the jump is set high enough."},{"location":"z-api-reference/#gravity","title":"Gravity","text":"<p>Control's how the player falls back to the ground and how high they can jump.</p> Parameter Name Description Weight Not weight in the physics sense. Behaves more like a multiplier on both jumps and the force of gravity. Start Velocity Not velocity in the physics sense. Behaves like a multiplier on the player's jump. Higher values results in higher jump heights. Additional Gravity Power The lower this value, the higher the player can jump."},{"location":"z-api-reference/#bobbing","title":"Bobbing","text":"<p>As the player moves they bob their head to the rhythm of their movement. To disable head bob entirely, simply set Bobbing Amplitude to zero.</p> Parameter Name Description Bobbing Frequency The rate at which bobbing occurs. Bobbing Amplitude The maximum deviation from center of a head bob."},{"location":"z-api-reference/#mouse","title":"Mouse","text":"<p>This node is responsible for rotating the player controller and it's camera so the player can look around the world.</p> Parameter Name Description Sensitivity The speed of movement relative to mouse/controller motions. High values results in faster movement. Use Controller If true, right analog controller look will be used instead of mouse. The speed of looking will still be controlled by Sensitivity."},{"location":"z-api-reference/#fieldofview","title":"FieldOfView","text":"<p>Controls field of view (FOV) slide effects, like when the player sprints. If no FOV sliding is desired, this can be disabled by setting FOV Change Factor to 0.0.</p> Parameter Name Description Base FOV The nominal FOV value of the first-person camera. FOV Change Factor A multiplier to velocity that determines by how much the FOV increased above Base FOV. The higher the value, the greater the change in FOV from sprinting will be. FOV Change Speed The speed at which FOV is transition between Base FOV and the modified FOV, and vice versa."}]}